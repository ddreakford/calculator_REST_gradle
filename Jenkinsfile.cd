pipeline {
    agent any

    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'The branch to locally clone, build and onboard to SeaLights')
        string(name: 'DOCKER_REPO', defaultValue: 'dwaynedreakford', description: 'Your Docker repo')
        string(name: 'APP_IMAGE_NAME', defaultValue: 'calculator_rest_cd', description: 'Name of the image to be deployed')
        string(name: 'SL_LAB_ID', defaultValue: '', description: 'SL Integration Build Lab ID')
    }
    environment {
        SL_COMPONENT_NAME = "rest_calculator_main"
        SL_COMPONENT_BUILD = "2.0.${BUILD_NUMBER}_CD"
    }

    stages {
        stage('SCM (Git)') {
            steps {
                cleanWs()
                git branch: params.BRANCH, url: 'https://github.com/ddreakford/calculator_REST_gradle.git'
            }
        }

        stage('Download SeaLights agent') {
            steps {
                withCredentials([string(credentialsId: 'SL_AGENT_TOKEN', variable: 'SL_TOKEN')]) {
                    // Download the agent
                    // Save the agent token in a file
                    sh '''
                        rm -rf sl-cd-agent && mkdir sl-cd-agent
                        wget -nv  https://agents.sealights.co/sl-cd-agent/sl-cd-agent-latest.zip && \
                            unzip -o -d sl-cd-agent sl-cd-agent-latest.zip
                        echo "Sealights CD Agent version used is:" `cat sl-cd-agent/version.txt`
                        rm sl-cd-agent-latest.zip
                        echo $SL_TOKEN > sl-cd-agent/sltoken.txt
                        ls -l sl-cd-agent
                    '''
                }
                // sh '''
                //     cat sl-cd-agent/sltoken.txt
                // '''
            }
        }

        stage('Build and Unit Test') {
            steps {
                // Unit tests run as normal but monitored by SeaLights
                sh '''
                    gradle clean test bootJar
                '''
            }
        }
        stage('Deploy to QA') {
            steps {
                script {
                    // Create/start a container with SeaLights monitoring
                    String APP_IMAGE_SPEC = "${DOCKER_REPO}/${APP_IMAGE_NAME}:${BUILD_NUMBER}"
                    sh """
                        docker build -f Dockerfile.cd -t ${APP_IMAGE_SPEC} \
                            --build-arg sl_component_name=${SL_COMPONENT_NAME} \
                            --build-arg sl_component_build=${SL_COMPONENT_BUILD} \
                            --build-arg sl_lab_id=${SL_LAB_ID} \
                            .
                        docker run --name ${APP_IMAGE_NAME} -d -p 8091:8091 ${APP_IMAGE_SPEC}
                    """
                }
            }
        }
    }
}