pipeline {
    agent any

    parameters {
        string(name: 'BRANCH', defaultValue: 'main', description: 'The branch to locally clone, build and onboard to SeaLights')
        string(name: 'SL_DOMAIN', defaultValue: '', description: 'Your SeaLights instance domain')
        string(name: 'TEST_STAGE', defaultValue: 'API Tests', description: 'The SeaLights test stage under which to run the tests')
    }

    stages {
        stage('SCM (Git)') {
            steps {
                cleanWs()
                git branch: params.BRANCH, url: 'https://github.com/ddreakford/calculator_REST_gradle.git'
            }
        }
        stage('Install/Configure SeaLights') {
            steps {
                withCredentials([string(credentialsId: 'SL_AGENT_TOKEN', variable: 'SL_TOKEN')]) {
                    sh '''
                        rm -rf sealights && mkdir sealights
                        wget -nv https://agents.sealights.co/sealights-java/sealights-java-latest.zip
                        unzip -o -d sealights sealights-java-latest.zip
                        rm sealights-java-latest.zip
                        echo "SeaLights agent version is:" `cat sealights/sealights-java-version.txt` "\n"
                        echo $SL_TOKEN > sealights/sltoken.txt
                        ls -l sealights
                        cat sealights/sltoken.txt
                    '''
                }
            }
        }
        stage('Create SL Build Session') {
            steps {
                sh """
                    java -Dsl.ignoreCertificateErrors=true -jar sealights/sl-build-scanner.jar -config \
                        -tokenfile sealights/sltoken.txt \
                        -appname Calculator-REST-TSAPI \
                        -branchname main \
                        -buildname 1.0.${BUILD_NUMBER} \
                        -pi '*com.slsamples.gradle.java.springboot*' \
                        -buildsessionidfile sealights/buildSessionId.txt
                """
            }
        }
        stage('Build App and Tests') {
            steps {
                sh "gradle classes testNGClasses"
            }
        }
        stage('Scan App Build') {
            steps {
                sh """
                    java -Dsl.ignoreCertificateErrors=true -Dsl.log.toFile=true -Dsl.log.level=info \
                        -jar sealights/sl-build-scanner.jar -scan \
                        -tokenfile sealights/sltoken.txt \
                        -buildsessionidfile sealights/buildSessionId.txt \
                        -workspacepath build -r \
                        -fi '*/main/*.class'
                """
            }
        }
        stage('Open Test Stage') {
            steps {
                withCredentials([string(credentialsId: 'SL_AGENT_TOKEN', variable: 'SL_TOKEN')]) {
                    script {
                        sh '''
                            export LABID=`cat sealights/buildSessionId.txt`
                            export BSID=`cat sealights/buildSessionId.txt`
                            export RESPONSE=`curl -s POST https://${SL_DOMAIN}/sl-api/v1/test-sessions \
                                -H "Authorization: Bearer ${SL_TOKEN}" \
                                -H "Content-Type: application/json" \
                                -d "{\\"labId\\":\\"${LABID}\\",\\"testStage\\":\\"${TEST_STAGE}\\",\\"bsid\\":\\"${BSID}\\",\\"sessionTimeout\\":10000}"\
                                `
                            echo $RESPONSE > sealights/response.txt
                        '''
                        // String responseTxt = readFile(file: 'sealights/response.txt')
                        def responseMap = readJSON(file: 'sealights/response.txt')
                        // Map responseMap = new groovy.json.JsonSlurper().parseText(responseTxt)
                        String sessionId = responseMap.data.testSessionId
                        println('Test Session ID: ' + sessionId)
                        writeFile(file: 'sealights/session_id.txt', text: sessionId)
                    }
                }
            }
        }
        stage('Run Tests') {
            steps {
                sh "gradle testNG"
            }
        }
        stage('Upload Test Results') {
            steps {
                echo "${STAGE_NAME}"
            }
        }
        stage('Close Test Stage') {
            steps {
                withCredentials([string(credentialsId: 'SL_AGENT_TOKEN', variable: 'SL_TOKEN')]) {
                    sh '''
                        export TEST_SESSION_ID=`cat sealights/session_id.txt`
                        curl -X DELETE "https://${SL_DOMAIN}/sl-api/v1/test-sessions/${TEST_SESSION_ID}" \
                            -H "Authorization: Bearer ${SL_TOKEN}" \
                            -H "Content-Type: application/json"
                    '''
                }
            }
        }
    }
}